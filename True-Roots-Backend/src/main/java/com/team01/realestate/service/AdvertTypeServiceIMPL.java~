package com.team01.realestate.service;

import com.team01.realestate.entity.concretes.business.AdvertType;
import com.team01.realestate.payload.messages.SuccessMessages;
import com.team01.realestate.payload.request.business.AdvertTypeDTO;
import com.team01.realestate.payload.response.business.ResponseMessage;
import com.team01.realestate.repository.AdvertTypeRepository;
import com.team01.realestate.service.impl.AdvertTypeService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;


@Service
@RequiredArgsConstructor
public class AdvertTypeServiceIMPL implements AdvertTypeService {

    @Autowired
    private AdvertTypeRepository advertTypeRepository;




    public ResponseMessage<Page<AdvertType>> getAllAdvertTypes(int page , int size,String sort ,String type) {

        Pageable pageable = PageRequest.of(page,size, Sort.by(sort).ascending());
        if(Objects.equals(type,"desc")){
            pageable = PageRequest.of(page,size, Sort.by(sort).descending());
        }
        Page<AdvertType> advertTypes = advertTypeRepository.getAllAdvertTypes(pageable);



        return ResponseMessage.<Page<AdvertType>>builder()
                .message(SuccessMessages.ADVERT_TYPES_FOUND)
                .object(advertTypes)
                .httpStatus(HttpStatus.OK)
                .build();
    }

    public AdvertTypeDTO getAdvertTypeById(Long id) {

        AdvertType advertType = advertTypeRepository.findById(id).orElseThrow(()->new RuntimeException("Advert type not found"));
        return AdvertTypeDTO.fromEntity(advertType);
    }

    @Override
    public List<AdvertTypeDTO> getAllAdvertType() {
        return advertTypeRepository.findAll().stream().map(AdvertTypeDTO::fromEntity).collect(Collectors.toList());
    }
}

//TODO DTO oluşturup, Response u Maple. Mapper class oluştur.
//Sil